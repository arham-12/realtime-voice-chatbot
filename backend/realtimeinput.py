import os
import dotenv
import schemas
from fastapi import APIRouter
from fastapi.responses import FileResponse
from utility_functions import get_response ,response_text_to_speech
router = APIRouter()


dotenv.load_dotenv()


UPLOAD_DIR = "audio"
if not os.path.exists(UPLOAD_DIR):
    os.makedirs(UPLOAD_DIR)


api_key = os.getenv("GROQ_API_KEY")

if not api_key:
    raise ValueError("API key not found. Please set the API key in the .env file.")





@router.post("/text_input")
async def text_input(text: schemas.Text):
    """
    Generate a response from the language model with memory support and save the response as an audio file.

    Args:
        text (str): The user input text to process.

    Returns:
        str: The response generated by the AI model.
    """
    text = text.question
    print(text)
    response = get_response(text, api_key)
    response_text_to_speech(response,"response.mp3")
    return {"response": response}


@router.get("/get_audio")
async def get_audio():
    """Return the audio file as a response."""
    return FileResponse(os.path.join(UPLOAD_DIR, "response.mp3"))



    

    
    